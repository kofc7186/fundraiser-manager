package types

import (
	"fmt"
	"time"

	"github.com/kofc7186/fundraiser-manager/pkg/square/types/models"
)

// this is the state of the order object according to Square
type SquareOrderState string

const (
	SQUARE_ORDER_STATE_UNKNOWN   SquareOrderState = ""
	SQUARE_ORDER_STATE_OPEN      SquareOrderState = "OPEN"
	SQUARE_ORDER_STATE_COMPLETED SquareOrderState = "COMPLETED"
	SQUARE_ORDER_STATE_CANCELED  SquareOrderState = "CANCELED"
	SQUARE_ORDER_STATE_DRAFT     SquareOrderState = "DRAFT"
)

func parseSquareOrderState(state string) (SquareOrderState, error) {
	switch SquareOrderState(state) {
	case SQUARE_ORDER_STATE_OPEN:
		return SQUARE_ORDER_STATE_OPEN, nil
	case SQUARE_ORDER_STATE_COMPLETED:
		return SQUARE_ORDER_STATE_COMPLETED, nil
	case SQUARE_ORDER_STATE_CANCELED:
		return SQUARE_ORDER_STATE_CANCELED, nil
	case SQUARE_ORDER_STATE_DRAFT:
		return SQUARE_ORDER_STATE_DRAFT, nil
	}
	return SQUARE_ORDER_STATE_UNKNOWN, fmt.Errorf("%s is not a valid SquareOrderState", state)
}

// This is the status of the order as it flows through fundraiser-manager
type OrderStatus string

const (
	ORDER_STATUS_UNKNOWN  OrderStatus = ""
	ORDER_STATUS_ONLINE   OrderStatus = "ONLINE"
	ORDER_STATUS_PRESENT  OrderStatus = "PRESENT"
	ORDER_STATUS_LABELED  OrderStatus = "LABELED"
	ORDER_STATUS_READY    OrderStatus = "READY"
	ORDER_STATUS_CLOSED   OrderStatus = "CLOSED"
	ORDER_STATUS_CANCELED OrderStatus = "CANCELED"
)

func parseOrderStatus(status string) (OrderStatus, error) {
	switch OrderStatus(status) {
	case ORDER_STATUS_ONLINE:
		return ORDER_STATUS_ONLINE, nil
	case ORDER_STATUS_PRESENT:
		return ORDER_STATUS_PRESENT, nil
	case ORDER_STATUS_LABELED:
		return ORDER_STATUS_LABELED, nil
	case ORDER_STATUS_READY:
		return ORDER_STATUS_READY, nil
	case ORDER_STATUS_CLOSED:
		return ORDER_STATUS_CLOSED, nil
	case ORDER_STATUS_CANCELED:
		return ORDER_STATUS_CANCELED, nil
	}
	return ORDER_STATUS_UNKNOWN, fmt.Errorf("%s is not a valid OrderStatus", status)
}

type OrderItem struct {
	SquareCatalogObjectID string          `json:"squareCatalogObjectID"`
	Modifiers             []OrderModifier `json:"modifier"`
	Name                  string          `json:"name"`
	Note                  string          `json:"note"`
	Quantity              string          `json:"quantity"`
	Variation             string          `json:"variation"`
}

type OrderModifier struct {
	Name                  string `json:"name"`
	Quantity              string `json:"quantity"`
	SquareCatalogObjectID string `json:"squareCatalogObjectID"`
}

type Order struct {
	DisplayName       string           `json:"displayName"`
	EmailAddress      string           `json:"emailAddress"`
	Expedite          bool             `json:"expedite"`
	Expiration        time.Time        `json:"expiration"`
	LastName          string           `json:"lastName"`
	ID                string           `json:"id"`
	IdempotencyKeys   map[string]bool  `json:"idempotencyKeys"`
	Items             []OrderItem      `json:"orderItems"`
	LabelIDs          []string         `json:"labelIDs"`
	Number            uint16           `json:"number"` // This should be autogenerated by Firestore upon insert
	Note              string           `json:"note"`
	PhoneNumber       string           `json:"phoneNumber"`
	SquareCustomerID  string           `json:"squareCustomerID,omitempty"`
	SquareOrderState  SquareOrderState `json:"squareOrderState"`
	SquareUpdatedTime time.Time        `json:"squareUpdatedTime"`
	Status            OrderStatus      `json:"status"`
	Version           int32            `json:"version"`
}

func CreateInternalOrderFromSquareOrder(squareOrder models.Order) (*Order, error) {
	o := &Order{
		Expedite: false, // make default explicit
		ID:       squareOrder.Id,
		Status:   ORDER_STATUS_UNKNOWN, //
		Version:  squareOrder.Version,
	}

	var err error
	if squareOrder.CustomerId != "" {
		o.SquareCustomerID = squareOrder.CustomerId
	}

	if len(squareOrder.Fulfillments) == 1 {
		if pickupDetails := squareOrder.Fulfillments[0].PickupDetails; pickupDetails != nil {
			o.Note = pickupDetails.Note

			if recipient := pickupDetails.Recipient; recipient != nil {
				// if customerID wasn't explicitly set before, let's try to get it from the fulfillment details
				if o.SquareCustomerID != "" {
					o.SquareCustomerID = recipient.CustomerId
				}
				if recipient.DisplayName != "" {
					o.DisplayName = recipient.DisplayName
				}
				if recipient.EmailAddress != "" {
					o.EmailAddress = recipient.EmailAddress
				}
				if recipient.PhoneNumber != "" {
					o.PhoneNumber = recipient.PhoneNumber
				}
			}
		}
	}

	for _, item := range squareOrder.LineItems {
		orderItem := OrderItem{
			Name:                  item.Name,
			Note:                  item.Note,
			Quantity:              item.Quantity,
			SquareCatalogObjectID: item.CatalogObjectId,
			Variation:             item.VariationName,
		}
		for _, modifier := range item.Modifiers {
			orderItemModifier := OrderModifier{
				Name:                  modifier.Name,
				Quantity:              modifier.Quantity,
				SquareCatalogObjectID: modifier.CatalogObjectId,
			}
			orderItem.Modifiers = append(orderItem.Modifiers, orderItemModifier)
		}
	}

	if o.SquareOrderState, err = parseSquareOrderState(squareOrder.State); err != nil {
		return nil, err
	}

	// per https://developer.squareup.com/reference/square/orders-api/webhooks/order.created
	// this will be an RFC3339 timestamp
	o.SquareUpdatedTime, err = time.Parse(time.RFC3339, squareOrder.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return o, nil
}
